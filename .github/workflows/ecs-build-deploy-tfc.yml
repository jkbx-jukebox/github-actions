name: AWS ECS Production Deployment

on:
  workflow_call:
    inputs:
      account_number:
        required: true
        type: string
      aws_default_region:
        required: true
        type: string
      aws_ecr_repository_version:
        required: true
        type: string
      dd_agent_major_version:
        required: true
        type: number
      dd_apm_enabled:
        required: true
        type: boolean
      dd_env:
        required: true
        type: string
      dd_service:
        required: true
        type: string
      dd_site:
        required: true
        type: string
      ref_name:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      sha:
        required: true
        type: string
      tfc_org_name:
        required: true
        type: string
      tfc_workspace_id:
        required: true
        type: string
      tfc_workspace_name:
        required: true
        type: string
    secrets:
      AMPLITUDE_API_KEY:
        required: false
      API_VERSION:
        required: true
      AUTH0_CLIENT_ID:
        required: true
      AUTH0_CLIENT_SECRET:
        required: true
      AUTH0_CONNECTION:
        required: true
      AUTH0_DOMAIN:
        required: true
      BRASSICA_PLATFORM_SLUG:
        required: true
      BRASSICA_SERVER:
        required: true
      BRASSICA_TOKEN:
        required: true
      BRASSICA_WEBHOOK_SHARED_SECRET:
        required: true
      CHARTMETRIC_HOST:
        required: true
      CHARTMETRIC_REFRESH_TOKEN:
        required: true
      DATABASE_URI:
        required: true
      DATADOG_SITE:
        required: true
      DD_API_KEY:
        required: true
      DD_LOGS_ENABLED:
        required: true
      DD_MERGE_XRAY_TRACES:
        required: true
      DD_TRACE_ENABLED:
        required: true
      ENCRYPTION_KEY_ARN:
        required: true
      ITERABLE_APIKEY:
        required: true
      ITERABLE_HOST:
        required: true
      JKBX_CONFIGURATION:
        required: true
      JWT_SECRET_ID:
        required: true
      LOG_LEVEL:
        required: true
      PLAID_CLIENT_ID:
        required: false
      PLAID_ENVIRONMENT:
        required: false
      PLAID_REDIRECT_TEST:
        required: false
      PLAID_REDIRECT_URI:
        required: false
      PLAID_SECRET:
        required: false
      RDS_DATABASE_NAME:
        required: true
      RDS_MASTER_PASSWORD:
        required: true
      RDS_MASTER_USERNAME:
        required: true
      REPO_READER:
        required: true
      REGION:
        required: true
      STATE_MACHINE_ARN:
        required: false
      TERRAFORM_CLOUD_API_TOKEN:
        required: true

jobs:
  ecs-deployment:
    name: Deploy ECS to environment
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ref_name }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.REPO_READER }}
          fetch-depth: 0

      - name: Clean submodule state (optional)
        run: git submodule deinit -f . && git submodule update --init --recursive

      - name: Get branch name
        id: get-branch-name
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Configure AWS Credentials from particular AWS account
        id: get-oidc-token
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws_default_region }}
          role-session-name: ${{ inputs.sha }}
          role-to-assume: "arn:aws:iam::${{ inputs.account_number }}:role/jkbx-backstage-github-oidc-${{ inputs.ref_name }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push ECS image to Amazon ECR (with cache)
        id: build-ecs
        if: ${{ inputs.ref_name }} == 'staging'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/ecs/${{ inputs.repo_name }}-${{ inputs.aws_ecr_repository_version }}:${{ inputs.sha }}
          file: Dockerfile.ecs
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DD_AGENT_MAJOR_VERSION=${{ inputs.dd_agent_major_version }}
            DD_API_KEY=${{ inputs.dd_apm_enabled }}
            DD_APM_ENABLED=${{ inputs.dd_apm_enabled }}
            DD_ENV=${{ inputs.dd_env }}
            DD_SERVICE=${{ inputs.dd_service }}
            DD_SITE=${{ inputs.dd_site }}

      - name: Trigger Terraform Cloud Run
        id: trigger-terraform-run
        if: success() && steps.build-ecs.outcome == 'success'
        continue-on-error: true
        run: |
          RESPONSE=$(curl \
            --header "Authorization: Bearer ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "attributes": {
                  "is-destroy": false,
                  "message": "Deploy image tag: ecs/${{ inputs.repo_name }}:${{ inputs.sha }}"
                },
                "type": "runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "${{ inputs.tfc_workspace_id }}"
                    }
                  }
                }
              }
            }' \
            https://app.terraform.io/api/v2/runs)

          echo "Terraform Cloud Run Response (Pretty):"
          echo "$RESPONSE" | jq .

  tfc-sensitive-variables:
    name: Create workspace variables on Terraform Cloud
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    steps:
      - name: List and Parse Terraform Cloud Workspace Variables
        id: list-tfc-variables
        run: |
          # Define the variable keys and corresponding environment variable names
          declare -A TFC_VARS=(
            ["TF_VAR_amplitude_api_key"]="AMPLITUDE_API_KEY"
            ["TF_VAR_api_version"]="API_VERSION"
            ["TF_VAR_auth0_client_id"]="AUTH0_CLIENT_ID"
            ["TF_VAR_auth0_client_secret"]="AUTH0_CLIENT_SECRET"
            ["TF_VAR_auth0_connection"]="AUTH0_CONNECTION"
            ["TF_VAR_auth0_domain"]="AUTH0_DOMAIN"
            ["TF_VAR_brassica_platform_slug"]="BRASSICA_PLATFORM_SLUG"
            ["TF_VAR_brassica_server"]="BRASSICA_SERVER"
            ["TF_VAR_brassica_token"]="BRASSICA_TOKEN"
            ["TF_VAR_brassica_webhook_secret"]="BRASSICA_WEBHOOK_SHARED_SECRET"
            ["TF_VAR_chartmetric_host"]="CHARTMETRIC_HOST"
            ["TF_VAR_chartmetric_refresh_token"]="CHARTMETRIC_REFRESH_TOKEN"
            ["TF_VAR_database_uri"]="DATABASE_URI"
            ["TF_VAR_datadog_site"]="DATADOG_SITE"
            ["TF_VAR_dd_api_key"]="DD_API_KEY"
            ["TF_VAR_dd_agent_major_version"]="DD_AGENT_MAJOR_VERSION"
            ["TF_VAR_dd_apm_enabled"]="DD_APM_ENABLED"
            ["TF_VAR_dd_env"]="DD_ENV"
            ["TF_VAR_dd_logs_enabled"]="DD_LOGS_ENABLED"
            ["TF_VAR_dd_merge_xray_traces"]="DD_MERGE_XRAY_TRACES"
            ["TF_VAR_dd_service"]="DD_SERVICE"
            ["TF_VAR_dd_trace_enabled"]="DD_TRACE_ENABLED"
            ["TF_VAR_default_logging_level"]="DEFAULT_LOGGING_LEVEL"
            ["TF_VAR_default_region"]="DEFAULT_REGION"
            ["TF_VAR_encryption_key_arn"]="ENCRYPTION_KEY_ARN"
            ["TF_VAR_iterable_api_key"]="ITERABLE_APIKEY"
            ["TF_VAR_iterable_host"]="ITERABLE_HOST"
            ["TF_VAR_jkbx_configuration"]="JKBX_CONFIGURATION"
            ["TF_VAR_jwt_secret_id"]="JWT_SECRET_ID"
            ["TF_VAR_log_level"]="LOG_LEVEL"
            ["TF_VAR_plaid_client_id"]="PLAID_CLIENT_ID"
            ["TF_VAR_plaid_environment"]="PLAID_ENVIRONMENT"
            ["TF_VAR_plaid_redirect_test"]="PLAID_REDIRECT_TEST"
            ["TF_VAR_plaid_redirect_uri"]="PLAID_REDIRECT_URI"
            ["TF_VAR_plaid_secret"]="PLAID_SECRET"
            ["TF_VAR_rds_database_name"]="RDS_DATABASE_NAME"
            ["TF_VAR_rds_master_password"]="RDS_MASTER_PASSWORD"
            ["TF_VAR_rds_master_username"]="RDS_MASTER_USERNAME"
            ["TF_VAR_region"]="REGION"
            ["TF_VAR_state_machine_arn"]="STATE_MACHINE_ARN"
          )

          # Fetch all variables from the Terraform Cloud API
          response=$(curl --location "https://app.terraform.io/api/v2/vars?filter%5Borganization%5D%5Bname%5D=${{ inputs.tfc_org_name }}&filter%5Bworkspace%5D%5Bname%5D=${{ inputs.tfc_workspace_name }}" \
            --silent \
            --header "Authorization: Bearer ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json")

          # Parse and export variable IDs
          for key in "${!TFC_VARS[@]}"; do
            VAR_ID=$(echo "$response" | jq -r ".data[] | select(.attributes.key == \"$key\") | .id")
            echo "${TFC_VARS[$key]}=$VAR_ID" >> $GITHUB_ENV
          done

      - name: Update Terraform Cloud Variables
        run: |
          declare -A TFC_VARS=(
            ["AMPLITUDE_API_KEY"]="${{ secrets.AMPLITUDE_API_KEY }}"
            ["API_VERSION"]="${{ secrets.API_VERSION }}"
            ["AUTH0_CLIENT_ID"]="${{ secrets.AUTH0_CLIENT_ID }}"
            ["AUTH0_CLIENT_SECRET"]="${{ secrets.AUTH0_CLIENT_SECRET }}"
            ["AUTH0_CONNECTION"]="${{ secrets.AUTH0_CONNECTION }}"
            ["AUTH0_DOMAIN"]="${{ secrets.AUTH0_DOMAIN }}"
            ["BRASSICA_PLATFORM_SLUG"]="${{ secrets.BRASSICA_PLATFORM_SLUG }}"
            ["BRASSICA_SERVER"]="${{ secrets.BRASSICA_SERVER }}"
            ["BRASSICA_TOKEN"]="${{ secrets.BRASSICA_TOKEN }}"
            ["BRASSICA_WEBHOOK_SHARED_SECRET"]="${{ secrets.BRASSICA_WEBHOOK_SHARED_SECRET }}"
            ["CHARTMETRIC_HOST"]="${{ secrets.CHARTMETRIC_HOST }}"
            ["CHARTMETRIC_REFRESH_TOKEN"]="${{ secrets.CHARTMETRIC_REFRESH_TOKEN }}"
            ["DATABASE_URI"]="${{ secrets.DATABASE_URI }}"
            ["DATADOG_SITE"]="${{ secrets.DATADOG_SITE }}"
            ["DD_AGENT_MAJOR_VERSION"]="${{ secrets.DD_AGENT_MAJOR_VERSION }}"
            ["DD_API_KEY"]="${{ secrets.DD_API_KEY }}"
            ["DD_APM_ENABLED"]="${{ secrets.DD_APM_ENABLED }}"
            ["DD_ENV"]="${{ secrets.DD_ENV }}"
            ["DD_LOGS_ENABLED"]="${{ secrets.DD_LOGS_ENABLED }}"
            ["DD_MERGE_XRAY_TRACES"]="${{ secrets.DD_MERGE_XRAY_TRACES }}"
            ["DD_SERVICE"]="${{ secrets.DD_SERVICE }}"
            ["DD_TRACE_ENABLED"]="${{ secrets.DD_TRACE_ENABLED }}"
            ["DEFAULT_LOGGING_LEVEL"]="${{ secrets.DEFAULT_LOGGING_LEVEL }}"
            ["DEFAULT_REGION"]="${{ secrets.DEFAULT_REGION }}"
            ["ENCRYPTION_KEY_ARN"]="${{ secrets.ENCRYPTION_KEY_ARN }}"
            ["ITERABLE_APIKEY"]="${{ secrets.ITERABLE_APIKEY }}"
            ["ITERABLE_HOST"]="${{ secrets.ITERABLE_HOST }}"
            ["JKBX_CONFIGURATION"]="${{ secrets.JKBX_CONFIGURATION }}"
            ["JWT_SECRET_ID"]="${{ secrets.JWT_SECRET_ID }}"
            ["LOG_LEVEL"]="${{ secrets.LOG_LEVEL }}"
            ["PLAID_CLIENT_ID"]="${{ secrets.PLAID_CLIENT_ID }}"
            ["PLAID_ENVIRONMENT"]="${{ secrets.PLAID_ENVIRONMENT }}"
            ["PLAID_REDIRECT_URI"]="${{ secrets.PLAID_REDIRECT_URI }}"
            ["PLAID_REDIRECT_TEST"]="${{ secrets.PLAID_REDIRECT_TEST }}"
            ["PLAID_SECRET"]="${{ secrets.PLAID_SECRET }}"
            ["RDS_DATABASE_NAME"]="${{ secrets.RDS_DATABASE_NAME }}"
            ["RDS_MASTER_PASSWORD"]="${{ secrets.RDS_MASTER_PASSWORD }}"
            ["RDS_MASTER_USERNAME"]="${{ secrets.RDS_MASTER_USERNAME }}"
            ["REGION"]="${{ secrets.REGION }}"
            ["STATE_MACHINE_ARN"]="${{ secrets.STATE_MACHINE_ARN }}"
          )

          # Initialize JSON object for the summary
          SUMMARY_JSON="[]"

          for key in "${!TFC_VARS[@]}"; do
            VAR_ID=$(echo "$key")
            VAR_VALUE="${TFC_VARS[$key]}"

            if [[ -n "${!VAR_ID}" && -n "${VAR_VALUE}" ]]; then
              RESPONSE=$(curl --silent --write-out "%{http_code}" --output /dev/null \
                --header "Authorization: Bearer ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}" \
                --header "Content-Type: application/vnd.api+json" \
                --request PATCH \
                --data "{
                  \"data\": {
                    \"id\": \"${!VAR_ID}\",
                    \"attributes\": {
                      \"value\": \"${VAR_VALUE}\"
                    },
                    \"type\": \"vars\"
                  }
                }" \
                https://app.terraform.io/api/v2/vars/${!VAR_ID})

              # Add to summary JSON based on response code
              if [[ "$RESPONSE" == "200" ]]; then
                SUMMARY_JSON=$(echo "$SUMMARY_JSON" | jq ". + [{\"key\": \"$key\", \"status\": \"success\", \"id\": \"${!VAR_ID}\"}]")
              else
                SUMMARY_JSON=$(echo "$SUMMARY_JSON" | jq ". + [{\"key\": \"$key\", \"status\": \"failed\", \"id\": \"${!VAR_ID}\"}]")
              fi
            else
              echo "Skipping $key: ID or value is empty."
            fi
          done

          # Pretty-print the summary
          echo "Summary of updates:"
          echo "$SUMMARY_JSON" | jq .

      # - name: Create Terraform Cloud Workspace Variables
      #   id: tfc-sensitive-variables
      #   continue-on-error: true
      #   run: |
      #     curl \
      #       --header "Authorization: Bearer ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}" \
      #       --header "Content-Type: application/vnd.api+json" \
      #       --request POST \
      #       --data '{
      #         "data": {
      #           "type": "vars",
      #           "attributes": {
      #             "key": "TF_VAR_chartmetric_refresh_token",
      #             "value": "${{ secrets.CHARTMETRIC_REFRESH_TOKEN }}",
      #             "description": "Chartmetric Refresh Token",
      #             "category": "env",
      #             "sensitive": true
      #           },
      #           "relationships": {
      #             "workspace": {
      #               "data": {
      #                 "type": "workspaces",
      #                 "id": "ws-PDRmKgZ3c26yojkj"
      #               }
      #             }
      #           }
      #         }
      #       }' \
      #       https://app.terraform.io/api/v2/vars
